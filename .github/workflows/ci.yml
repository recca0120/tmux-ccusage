name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  shellcheck:
    name: ShellCheck
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@master
      with:
        scandir: '.'
        severity: error
        ignore_paths: test coverage
        format: gcc
        check_together: 'yes'
        disable_matcher: true

  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y jq tmux bc
        # Install bats
        sudo npm install -g bats
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install jq tmux bats-core
    
    - name: Create mock ccusage
      run: |
        mkdir -p $HOME/.local/bin
        cat > $HOME/.local/bin/ccusage << 'EOF'
        #!/usr/bin/env bash
        case "$1" in
          "--version"|"-v")
            echo "15.3.1"
            ;;
          "daily"|"monthly"|"session"|"blocks"|*)
            if [[ "$@" == *"-j"* ]] || [[ "$@" == *"--json"* ]]; then
              cat << 'JSON'
        {
          "daily": [
            {"date": "2025-07-15", "totalCost": 3.20},
            {"date": "2025-07-16", "totalCost": 130.45},
            {"date": "2025-07-17", "totalCost": 17.96}
          ],
          "monthly": [
            {"month": "2025-07", "totalCost": 450.25}
          ],
          "totals": {"totalCost": 160.55}
        }
        JSON
            else
              echo "Daily usage report"
            fi
            ;;
        esac
        EOF
        chmod +x $HOME/.local/bin/ccusage
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    
    - name: Run original tests
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        export TMUX_TEST_MODE=1
        ./test/test_runner.sh
    
    - name: Run Bats tests
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        export TMUX_TEST_MODE=1
        bats test/bats/*.bats --formatter tap
    
    - name: Start tmux server for integration tests
      run: |
        # Start tmux server in detached mode
        tmux new-session -d -s ci-test
        # Wait a moment for server to start
        sleep 1
        # Verify tmux is running
        tmux list-sessions
    
    - name: Run tmux integration tests
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        
        # Test basic functionality with real tmux
        echo "Testing with real tmux session..."
        
        # Test setting tmux options first
        tmux set-option -g @ccusage_subscription_amount 100
        tmux set-option -g @ccusage_warning_threshold 80
        
        # Test script execution in tmux environment
        # Use send-keys and capture-pane instead of run-shell for better control
        tmux send-keys -t ci-test "cd $PWD && ./tmux-ccusage.sh" Enter
        sleep 2
        result=$(tmux capture-pane -t ci-test -p | tail -1)
        echo "Result: $result"
        
        # Test percentage format
        tmux send-keys -t ci-test "./tmux-ccusage.sh percentage" Enter
        sleep 2
        percentage_result=$(tmux capture-pane -t ci-test -p | tail -1)
        echo "Percentage result: $percentage_result"
        
        # Test that tmux options are being read
        option_value=$(tmux show-option -gv @ccusage_subscription_amount)
        echo "Subscription amount option: $option_value"
        
        # Test status integration
        tmux set-option -g status-right "#($PWD/tmux-ccusage.sh) | %H:%M"
        
        # Verify status configuration
        status_right=$(tmux show-option -gv status-right)
        echo "Status right: $status_right"
        
        # Simple validation that results contain expected format
        if [[ "$result" =~ ^\$[0-9]+\.[0-9]{2}$ ]]; then
          echo "✓ Basic script execution test passed"
        else
          echo "⚠ Basic script result format unexpected: $result"
        fi
        
        if [[ "$percentage_result" =~ ^[0-9]+\.[0-9]+%$ ]] || [[ "$percentage_result" == "N/A" ]]; then
          echo "✓ Percentage format test passed"
        else
          echo "⚠ Percentage result format unexpected: $percentage_result"
        fi
        
        echo "✓ tmux integration tests completed"
    
    - name: Cleanup tmux session
      if: always()
      run: |
        # Kill tmux session if it exists
        tmux kill-session -t ci-test 2>/dev/null || true
        tmux kill-server 2>/dev/null || true
    
    - name: Install kcov (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        wget https://github.com/SimonKagstrom/kcov/releases/download/v42/kcov-amd64.tar.gz
        tar xzf kcov-amd64.tar.gz
        sudo cp usr/local/bin/kcov /usr/local/bin/
        sudo cp -r usr/local/share/doc/kcov /usr/local/share/doc/
    
    - name: Run tests with coverage (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        export TMUX_TEST_MODE=1
        mkdir -p coverage
        
        # Run tests with kcov
        kcov --exclude-pattern=/usr/,/tmp/,test/,/home/runner/.local/bin/ coverage ./test/run_bats_tests.sh || true
        
        # Generate coverage summary
        if [ -f coverage/index.html ]; then
          coverage_percent=$(grep -oP 'headerCovTableEntryLo">\K[0-9.]+(?=%)' coverage/index.html | head -1 || echo "0")
          echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "Overall coverage: ${coverage_percent}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View detailed report in artifacts" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: coverage/
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage
        flags: unittests
        name: codecov-tmux-ccusage
        fail_ci_if_error: false
    
    - name: Test Summary
      if: always()
      run: |
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "Tests completed on ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY